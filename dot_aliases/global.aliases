# Pretty print paths
alias epath="echo $PATH | tr -s ':' '\n'"
alias elibpath="echo $LD_LIBRARY_PATH | tr -s ':' '\n'"

# Configure opening all the dot files in chezmoi edit
alias zshc="chezmoi edit $HOME/.zshrc"
alias vimc="chezmoi edit $HOME/.vimrc"
alias tmuxc="chezmoi edit $HOME/.tmux.conf"
alias bashc="chezmoi edit $HOME/.bashrc"
alias bashpc="chezmoi edit $HOME/.bash_profile"
alias galiasc="chezmoi edit $HOME/.aliases/global.aliases"
alias laliasc="chezmoi edit $HOME/.aliases/local.aliases"
alias slatec="chezmoi edit $HOME/.slate"

# Productivity
alias szsh="source $HOME/.zshrc"
alias sbash="source $HOME/.bashrc"
alias lsl="ls -hal"

# Print enviornment variables
alias ecvd="echo $CUDA_VISIBLE_DEVICES"

# Copy from within terminals only for Mac
alias pbcopy="xclip -selection clipboard"
alias pbpaste="xclip -selection clipboard -o"

#----------------------------------------------------------------------
# Write custom functions
##----------------------------------------------------------------------

# Print tab separated values on new line even with missing columns
function trt () {
    tr "\t" "\n" | nl -b a
}

# Get content from a specified line number from a long file
function getline () {
    head -n $1 $2 | tail -n 1
}

# Get output of previous command from stdout
# Usage echo $lines
function redirect () {
  ol=("${(f@)$(cat)}")
}

# Function to view markdown in terminal
rmd () {
  pandoc $1 | lynx -stdin
}

# jp to en translation
function jpen () {
        trans -show-original y -show-original-phonetics n -show-translation y -show-translation-phonetics n -show-prompt-message n -show-languages n -show-original-dictionary N -show-dictionary n -show-alternatives n ja:en $1
}

# word to definition
function definition () {
    while IFS='' read -r word || [[ -n "$word" ]]; do
        echo "Translating word : $word"
        define --oxford-dictionary-app-id=f986234d --oxford-dictionary-app-key=35bb076d3a29db46dc5615361706ca28 $word
    done < "$1"
}

# function to print in middle of screen
mpt() {
   clear ;
   w=$(( `tput cols ` / 2 ));
   h=$(( `tput lines` / 2 ));
   tput cup $h;
   printf "%${w}s \n"  "$1"; tput cup $h;
   sleep 5;
   clear;
}

# Get specific line content from a big file
function getline () {
    head -n $1 $2 | tail -n 1
}

# Get output of previous command from stdout
# Usage echo $lines
function redirect () {
  ol=("${(f@)$(cat)}")
}

# Function to view markdown in terminal
rmd () {
  pandoc $1 | lynx -stdin
}

# single line to multiline
function otml () {
    echo $1 | sed 's/ / \\\n/g'
}

# count number of words in each line of file
function cw () {
    awk '{print NF}' $1
}
